@prefix : <http://example.org/> .
@prefix rules: <http://example.org/rules/> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix x3do: <https://www.web3d.org/specifications/X3dOntology4.0#> .
@prefix x3d: <https://www.web3d.org/specifications/x3d-4.0.xsd#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

rules:CollisionMap a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision"
  ];
 rr:subjectMap [
  rr:template "http://example.org/{@id}";
  rr:class owl:NamedIndividual
 ];
 rr:predicateObjectMap [
  rr:predicate rdf:type;
  rr:objectMap [
    rr:constant x3do:Collision
  ]
 ];
 rr:predicateObjectMap [
  rr:predicate  x3do:hasParent;
  rr:objectMap [
    rr:template "http://example.org/{../@id}"
  ]
 ];
 rr:predicateObjectMap [
  rr:predicate x3do:enabled;
  rr:objectMap [
    rml:reference "@enabled"
  ]
 ];
 rr:predicateObjectMap [
  rr:predicate x3do:bboxCenter;
  rr:objectMap [
    rml:reference "@bboxCenter"
  ]
 ];
 rr:predicateObjectMap [
  rr:predicate x3do:bboxSize;
  rr:objectMap [
    rml:reference "@bboxSize"
  ]
 ]; 
 rr:predicateObjectMap [
  rr:predicate x3do:containerField;
  rr:objectMap [
    rml:reference "@containerField"
  ]
 ];
 rr:predicateObjectMap [
  rr:predicate x3do:class;
  rr:objectMap [
    rml:reference "@class"
  ]
 ];
 rr:predicateObjectMap [
  rr:predicate x3do:DEF;
  rr:objectMap [
    rml:reference "@DEF"
  ]
 ];
 rr:predicateObjectMap [
  rr:predicate x3do:USE;
  rr:objectMap [
    rml:reference "@USE"
  ]
].

rules:CollisionMap2 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/IS"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasIS;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap3 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/MetadataDouble"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasMetadata;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap4 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/MetadataFloat"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasMetadata;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap5 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/MetadataInteger"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasMetadata;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap6 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/MetadataSet"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasMetadata;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap7 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/MetadataString"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasMetadata;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap8 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ProtoInstance"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasMetadata;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap9 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Viewpoint"
  ]; 
  rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap10 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Transform"
  ]; 
  rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap11 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/WorldInfo"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap12 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Background"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap13 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/GeoPositionInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap14 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/GeoTouchSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap15 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/HAnimDisplacer"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap16 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/NurbsPositionInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap17 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/NurbsOrientationInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap18 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/NurbsSurfaceInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap19 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/BooleanFilter"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap20 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/BooleanSequencer"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap21 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/BooleanToggle"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap22 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/BooleanTrigger"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap23 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/IntegerSequencer"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap24 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/IntegerTrigger"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap25 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/TimeTrigger"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap26 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ColorInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap27 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/CoordinateInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap28 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/CoordinateInterpolator2D"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap29 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/CylinderSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap30 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/KeySensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap31 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/LoadSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap32 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/NormalInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap33 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/OrientationInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap34 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/PlaneSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap35 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/PositionInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap36 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/PositionInterpolator2D"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap37 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ProximitySensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap38 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ScalarInterpolator"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap39 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Script"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap40 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/SphereSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap41 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/StringSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap42 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/TimeSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap43 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/TouchSensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap44 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/VisibilitySensor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap45 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/GeoViewpoint"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap46 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Fog"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap47 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/NavigationInfo"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap48 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/TextureBackground"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap49 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/EspduTransform"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap50 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/SignalPdu"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap51 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ReceiverPdu"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap52 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/TransmitterPdu"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap53 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/GeoLocation"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap54 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/GeoLOD"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap55 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/HAnimJoint"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap56 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/HAnimSegment"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap57 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/HAnimSite"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap58 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/HAnimHumanoid"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap59 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Anchor"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap60 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Group"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap61 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Billboard"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:SceneMap62 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Inline"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap63 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/LOD"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap64 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/StaticCollision"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap65 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Switch"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap66 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/DirectionalLight"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap67 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/SpotLight"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap68 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/PointLight"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap69 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Shape"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap70 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Sound"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap71 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/GeoMetadata"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap72 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ProtoDeclare"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap73 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ExternProtoDeclare"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap74 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ROUTE"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap75 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/EXPORT"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap76 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/IMPORT"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].

rules:CollisionMap77 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/ProtoInstance"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
];

rules:CollisionMap78 a rr:TriplesMap;
  rml:logicalSource [
    rml:source "HelloWorld.x3d";
    rml:referenceFormulation ql:XPath;
    rml:iterator "//Collision/Collision"
  ]; 
 rr:subjectMap [
    rr:template "http://example.org/{../@id}";
  ];
 rr:predicateObjectMap [
  rr:predicate x3do:hasChildren;
  rr:objectMap [
    rr:template "http://example.org/{@id}"
  ]
].